/*******************************************************************
*  Copyright(c) 2015
*  All rights reserved.
*
*  文件名称: HttpMessageDef.h
*  简要描述: Http消息描述
*
*  创建日期: 2015/10/20
*  作者: zhangcb
*
*  修改日期:
*  作者:
*  说明:
******************************************************************/

#include <string>
#include <vector>
#include <memory>

class IHttpMessage;
class IHttpMessageResult;
typedef std::shared_ptr<IHttpMessage>       HttpMessageSharedPtr;
typedef std::shared_ptr<IHttpMessageResult> HttpMessageResultSharedPtr;

/*******************************************************************
*  枚举：HttpMessageType
*  描述：消息类型，区分不同的消息请求
*******************************************************************/
enum HttpMessageType;

/*******************************************************************
*  枚举：HttpMessageMethod
*  描述：消息投递类型
*******************************************************************/
enum HttpMessageMethod
{
    METHOD_POST,
    METHOD_GET,
};

/*******************************************************************
*  枚举：HttpMessageParam
*  描述：消息参数，请求的消息参数描述
*******************************************************************/
class HttpMessageParam
{
public:
    std::wstring mName;
    std::wstring mValue;
    bool         mNeedPost; // 是否需要投递
};

/*******************************************************************
*  枚举：IHttpMessage
*  描述：消息描述
*******************************************************************/
class IHttpMessage
{
public:
    IHttpMessage(){};
    virtual ~IHttpMessage(){};

public:
    /*******************************************************************
    *  描述：设置响应结果
    *  参数：result 响应结果
    *  返回：无
    *******************************************************************/
    virtual void SetResult(HttpMessageResultSharedPtr result) = 0;

    /*******************************************************************
    *  描述：获取结果
    *  参数：无
    *  返回：结果
    *******************************************************************/
    virtual HttpMessageResultSharedPtr GetResult() const = 0;


    /*******************************************************************
    *  描述：设置消息类型
    *  参数：type 消息类型
    *  返回：无
    *******************************************************************/
    virtual void SetType(HttpMessageType type) = 0;

    /*******************************************************************
    *  描述：获取消息类型
    *  参数：无
    *  返回：消息类型
    *******************************************************************/
    virtual HttpMessageType GetType() const = 0;


    /*******************************************************************
    *  描述：设置消息投递类型；
    *  参数：method 消息投递类型：POST,GET等
    *  返回：无
    *******************************************************************/
    virtual void SetMethod(HttpMessageMethod method) = 0;

    /*******************************************************************
    *  描述：设置消息投递类型
    *  参数：无
    *  返回：消息投递类型
    *******************************************************************/
    virtual HttpMessageMethod GetMethod() const = 0;


    /*******************************************************************
    *  描述：设置服务器地址
    *  参数：server 服务器地址
    *  返回：无 
    *******************************************************************/
    virtual void SetServer(const std::wstring &server) = 0;

    /*******************************************************************
    *  描述：获取服务器地址
    *  参数：无 
    *  返回：服务器地址
    *******************************************************************/
    virtual std::wstring GetServer() const = 0;


    /*******************************************************************
    *  描述：设置服务器的基地址
    *  参数：base base地址
    *  返回：无 
    *******************************************************************/
    virtual void SetBase(const std::wstring &base) = 0;

    /*******************************************************************
    *  描述：获取服务器的基地址
    *  参数：无
    *  返回：base地址
    *******************************************************************/
    virtual std::wstring GetBase() const = 0;


    /*******************************************************************
    *  描述：设置服务器的实际地址
    *  参数：address 实际地址
    *  返回：无
    *******************************************************************/
    virtual void SetAddress(const std::wstring &address) = 0;
    
    /*******************************************************************
    *  描述：获取服务器的实际地址
    *  参数：无
    *  返回：实际地址
    *******************************************************************/
    virtual std::wstring GetAddress() const = 0;


    /*******************************************************************
    *  描述：添加请求参数
    *  参数：name 参数名；value 参数的值；bPost 是否投递；
    *  返回：无
    *******************************************************************/
    virtual void AddParam(const std::wstring &name, const std::wstring &value, bool bPost) = 0;
    
    /*******************************************************************
    *  描述：获取请求参数的值
    *  参数：name 参数名；
    *  返回：参数值
    *******************************************************************/
    virtual std::wstring GetParam(const std::wstring &name) const = 0;

    /*******************************************************************
    *  描述：获取请求参数列表
    *  参数：无
    *  返回：请求参数列表
    *******************************************************************/
    virtual std::vector<HttpMessageParam> GetParams() const = 0;
};

/*******************************************************************
*  枚举：IHttpMessageResult
*  描述：消息响应描述
*******************************************************************/
class IHttpMessageResult
{
public:
    IHttpMessageResult(){};
    virtual ~IHttpMessageResult(){};

public:
    /*******************************************************************
    *  描述：解析内容
    *  参数：content 文本内容那个
    *  返回：无
    *******************************************************************/
    virtual void Parse(const std::wstring &content) = 0;


    /*******************************************************************
    *  描述：是否所有OK
    *  参数：isOk 是否OK
    *  返回：无
    *******************************************************************/
    virtual void SetIsOk(bool isOk) = 0;

    /*******************************************************************
    *  描述：是否所有OK
    *  参数：isOk 是否OK
    *  返回：无
    *******************************************************************/
    virtual bool IsOk() const = 0;


    /*******************************************************************
    *  描述：设置错误码
    *  参数：iErrorCode 错误码，可能为http错误码，可能为内部错误码；
    *  返回：无
    *******************************************************************/
    virtual void SetErrorCode(int iErrorCode) = 0;

    /*******************************************************************
    *  描述：获取错误码
    *  参数：无
    *  返回：错误码
    *******************************************************************/
    virtual int GetErrorCode() const = 0;


    /*******************************************************************
    *  描述：设置错误信息
    *  参数：strErrorInfo 错误信息
    *  返回：无
    *******************************************************************/
    virtual void SetErrorInfo(std::wstring strErrorInfo) = 0;

    /*******************************************************************
    *  描述：获取错误信息
    *  参数：无
    *  返回：错误信息
    *******************************************************************/
    virtual std::wstring GetErrorInfo() const = 0;
};